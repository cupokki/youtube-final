name: Deploy to AWS EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  APPLICATION_NAME: youtube
  DEPLOY_PACKAGE_NAME: youtube.jar

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Java 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Gradlew 실행 권한 부여
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew

      # 4. Gradle 빌드 (테스트 제외)
#      - name: Build with Gradle
#        run: |
#          ./gradlew clean build -x test

      # 5. AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. 빌드된 JAR 파일을 S3에 업로드
      - name: Upload JAR to S3
        run: |
          if [[ -z "${{ env.DEPLOY_PACKAGE_NAME }}" ]]; then
            echo "DEPLOY_PACKAGE_NAME is empty!"
          else
            echo "DEPLOY_PACKAGE_NAME (escaped): '${{ env.DEPLOY_PACKAGE_NAME }}' | tr -d '*'
          fi
          # aws s3 cp build/libs/${{ env.APPLICATION_NAME }}-0.0.1-SNAPSHOT.jar \
          #  s3://${{ secrets.S3_BUCKET_NAME }}/youtube.jar

      # 7. EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DEPLOY_PACKAGE_NAME: ${{ env.DEPLOY_PACKAGE_NAME }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: S3_BUCKET_NAME,AWS_REGION,DEPLOY_PACKAGE_NAME
          script: |
            # 애플리케이션 디렉토리 생성
            mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app

            # 기존 애플리케이션 종료 (PID 확인 후 종료)
            if [ -f "/home/ubuntu/app/application.pid" ]; then
              PID=$(cat /home/ubuntu/app/application.pid)
              if ps -p $PID > /dev/null; then
                echo "Stopping current application with PID: $PID..."
                sudo kill $PID
                sleep 5

                # 프로세스가 종료될 때까지 대기
                while ps -p $PID > /dev/null; do
                  echo "Waiting for process $PID to stop..."
                  sleep 2
                done
                echo "Application stopped successfully."
              fi
              rm -f /home/ubuntu/app/application.pid
            fi

            # 최신 JAR 다운로드
            echo "Downloading latest application JAR from S3..."
            echo s3://$S3_BUCKET_NAME/$DEPLOY_PACKAGE_NAME >> debug
            echo DEBUG
            cat ./debug
            aws s3 cp s3://$S3_BUCKET_NAME/$DEPLOY_PACKAGE_NAME application.jar

            # 권한 설정
            sudo chown ubuntu:ubuntu application.jar

            # 새로운 애플리케이션 실행
            echo "Starting new application..."
            nohup java -jar /home/ubuntu/app/application.jar \
              --spring.profiles.active=aws \
              --spring.datasource.url=jdbc:mariadb://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
              --spring.datasource.username=${{ secrets.DB_USERNAME }} \
              --spring.datasource.password=${{ secrets.DB_PASSWORD }} \
              --cloud.aws.s3.bucket=$S3_BUCKET_NAME \
              --cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }} \
              --cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              --cloud.aws.region.static=$AWS_REGION \
              --file.upload.uri=http://${S3_BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com/upload \
              > /home/ubuntu/app/application.log 2>&1 &

            # 새 프로세스 PID 저장
            echo $! > /home/ubuntu/app/application.pid
            echo "Application started with PID $(cat /home/ubuntu/app/application.pid)"

            # 애플리케이션 실행 확인
            sleep 10
            NEW_PID=$(cat /home/ubuntu/app/application.pid)
            if ps -p $NEW_PID > /dev/null; then
              echo "Deployment completed successfully!"
            else
              echo "Failed to start application. Check logs at /home/ubuntu/app/application.log"
              exit 1
            fi

      # 8. 배포 성공 알림 (선택 사항)
      # - name: Notify Slack on Deployment
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: Deployment to EC2 completed
      #   if: always()

    # 15분 이상 실행되면 강제 종료
    timeout-minutes: 15